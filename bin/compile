#!/bin/sh

#
# Heroku buildpack for Meteor
#

# fail fast.
set -e
# debug verbosely.
#set -x

# Load config vars into environment (from https://devcenter.heroku.com/articles/buildpack-api)
export_env_dir() {
  env_dir=$1
  whitelist_regex=${2:-''}
  blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
  if [ -d "$env_dir" ]; then
    for e in $(ls $env_dir); do
      echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
      export "$e=$(cat $env_dir/$e)"
      :
    done
  fi
}

export_env_dir $3

# Enable verbose debugging if configured to -- though this has to come after
# we've loaded environment configs.
if [ -n "${BUILDPACK_VERBOSE+1}" ]; then
  set -x
fi

# Get the path to dir one above this file.
BUILDPACK_DIR=$(cd -P -- "$(dirname -- "$0")" && cd .. && pwd -P)
# Get the directory our app is checked out in (the "BUILD_DIR"), passed by Heroku
APP_CHECKOUT_DIR=$1

#
# Find the meteor app ($APP_SOURCE_DIR).
#

# Set meteor app dir's location to the root of the git repo, plus the value of
# METEOR_APP_DIR (which defaults empty).  If you put the meteor app in src/ or
# some other subdirectory, define METEOR_APP_DIR.
APP_SOURCE_DIR="${APP_CHECKOUT_DIR}"
if [ -n "$METEOR_APP_DIR" ]; then
  APP_SOURCE_DIR="${APP_SOURCE_DIR}/${METEOR_APP_DIR}"
fi

# Try "$APP_SOURCE_DIR/app/" if meteor app isn't there (the "Iron scaffolding
# tool" default).
if [ ! -d "$APP_SOURCE_DIR/.meteor" ] && [ -d "$APP_SOURCE_DIR/app/.meteor" ]; then
  APP_SOURCE_DIR="$APP_SOURCE_DIR/app/"
fi
if [ ! -d "$APP_SOURCE_DIR/.meteor" ]; then
  echo "FATAL: Can't find meteor app. Set METEOR_APP_DIR to the relative location of the meteor app within your repository if it's not in the root or 'app/' supdirectory.  (Tried ${APP_SOURCE_DIR})"
  exit 1
fi

# Where we will install meteor. Has to be outside the APP_CHECKOUT_DIR.
METEOR_DIR=`mktemp -d "$BUILDPACK_DIR"/meteor-XXXX`
# Where we'll put things we compile.
COMPILE_DIR_SUFFIX=".meteor/heroku_build"
COMPILE_DIR="$APP_CHECKOUT_DIR"/"$COMPILE_DIR_SUFFIX"
# Try to minimize meteor's printing, unless we're running verbosely.
if [ -z "$BUILDPACK_VERBOSE" ]; then
  METEOR_PRETTY_OUTPUT=0
fi

# Create directories as needed.
mkdir -p "$APP_CHECKOUT_DIR" "$METEOR_DIR" "$COMPILE_DIR"

# Update the path a place to store our compiled app/binaries
PATH="$METEOR_DIR/.meteor:$COMPILE_DIR/bin:$PATH"

# Set a default ROOT_URL if one is not defined. Currently, HEROKU_APP_NAME is
# only available if you enable the labs addon "Heroku Dyno Metadata":
# https://devcenter.heroku.com/articles/dyno-metadata
# This logic is duplicated in extra/root_url.sh so that it repeats on dyno
# restart.
if [ -z "$ROOT_URL" ] && [ -n "$HEROKU_APP_NAME" ] ; then
  export ROOT_URL="https://${HEROKU_APP_NAME}.herokuapp.com"
fi
if [ -z "$ROOT_URL" ] ; then
  echo "FATAL: ROOT_URL is not defined."
  exit 1
fi

#
# Install meteor
#
echo "-----> Installing meteor"
curl -sS https://install.meteor.com | HOME="$METEOR_DIR" /bin/sh
METEOR="$METEOR_DIR/.meteor/meteor" # The meteor binary.

# Maybe update release. Upgrade only if needed because it's slow.
CUR_RELEASE=`HOME=$METEOR_DIR $METEOR --version | sed -e 's/Meteor /METEOR@/'`
APP_RELEASE=`cat "$APP_SOURCE_DIR/.meteor/release"`
echo "-----> App targets $APP_RELEASE"
if test "$CUR_RELEASE" != "$APP_RELEASE" ; then
  # Sort CUR_RELEASE and APP_RELEASE and find the oldest
  OLDER_RELEASE=`echo "$CUR_RELEASE\n$APP_RELEASE" | sort --version-sort | head -n1`
  if [ "$CUR_RELEASE" = "$OLDER_RELEASE" ]; then
    echo "-----> Upgrading meteor to $APP_RELEASE"
    HOME=$METEOR_DIR $METEOR update --release $APP_RELEASE
  fi
fi
echo "-----> Meteor version: `HOME=$METEOR_DIR $METEOR --version`"

#
# Build the meteor app!
#
echo "-----> Bundling bundle"
cd "$APP_SOURCE_DIR"

# Determine if we have --server-only flag capability. Allow non-zero return from grep.
echo "-----> Checking if this meteor version supports --server-only"
set +e
HAS_SERVER_ONLY=`HOME=$METEOR_DIR $METEOR help build | grep -e '--server-only'`
set -e
if [ -n "$HAS_SERVER_ONLY" ] ; then
  SERVER_ONLY_FLAG='--server-only'
else
  SERVER_ONLY_FLAG=""
fi
# Remove the Android platform if we don't support the --server-only flag.  iOS
# platform gets ignored properly.
if [ -z "$SERVER_ONLY_FLAG" ]; then
  echo "-----> Attempting to remove android platform."
  HOME=$METEOR_DIR $METEOR remove-platform android || true
  echo "-----> Moving on."
fi

# Identify the npm/node to use.  For Meteors > 1.3, we use `meteor npm` and
# `meteor node` to find the bundled binaries.  For older releases, we need to
# resort to using `find` to search out the appropriate version within the
# bundle.
set +e
HOME=$METEOR_DIR $METEOR npm --version > /dev/null
METEOR_NPM_EXIT_CODE=$?
set -e


# <hack>
# We'd like to use `meteor node` and `meteor npm`, but they're unreliable.
# https://github.com/AdmitHub/meteor-buildpack-horse/issues/120
# https://github.com/meteor/meteor/issues/7338
# search out npm/node within $METEOR_DIR.
BARE_VERSION=`echo "$APP_RELEASE" | sed -e 's/METEOR@//'`
echo "------> Preparing for hack with bare version= $BARE_VERSION ...."
echo `ls -al $METEOR_DIR`
METEOR_NPM=`find $METEOR_DIR -wholename "*$BARE_VERSION*/dev_bundle/bin/npm"`
METEOR_NODE=`find $METEOR_DIR -wholename "*$BARE_VERSION*/dev_bundle/bin/node"`
if [ -z "$METEOR_NPM" ] || [ -z "$METEOR_NODE" ] ; then
  echo "FATAL: Can't find npm/node within meteor bundle. This is a bug. Please open an issue at https://github.com/AdmitHub/meteor-buildpack-horse.";
  exit 1
fi

echo "-------> Found METEOR_NPM=$METEOR_NPM"
echo "-------> Found METEOR_NODE=$METEOR_NODE"

# Trim whitespace
METEOR_NPM=`echo "$METEOR_NPM" | sed -e 's/[[:space:]]*$//'`
METEOR_NODE=`echo "$METEOR_NODE" | sed -e 's/[[:space:]]*$//'`
echo "-----> Using searched-for node: `$METEOR_NODE --version`"
echo "----->                 and npm: `$METEOR_NPM --version`"
# </hack>

# If we use npm on root, run npm install.  Don't use `--production` here, as we
# may need devDependencies (e.g. webpack) in order to build the meteor app.
if [ -e "$APP_SOURCE_DIR"/package.json ]; then
  HOME=$METEOR_DIR $METEOR_NPM install
fi

# Related to https://github.com/meteor/meteor/issues/2796 and
# https://github.com/meteor/meteor/issues/2606.  Some packages only build their
# assets at runtime, and thus they are not available for bundling unless meteor
# has been launched.  To opt-in to this, set BUILDPACK_PRELAUNCH_METEOR=1.
if [ -n "${BUILDPACK_PRELAUNCH_METEOR+1}" ]; then
  echo "-----> BUILDPACK_PRELAUNCH_METEOR: Pre-launching meteor to build packages assets"
  # Remove the Android platform because it fails due to the Android tools not
  # being installed, but leave the iOS platform because it's ignored.
  HOME=$METEOR_DIR $METEOR remove-platform android || true
  HOME=$METEOR_DIR timeout -s9 60 $METEOR --settings settings.json || true
fi

# Now on to bundling. Don't put the bundle in $APP_CHECKOUT_DIR, or it will
# recurse, trying to bundle up its own bundling.
BUNDLE_DEST=`mktemp -d "$BUILDPACK_DIR/build-XXXX"`
echo "-----> Building Meteor with ROOT_URL: $ROOT_URL"
HOME=$METEOR_DIR $METEOR build --server $ROOT_URL $SERVER_ONLY_FLAG --directory $BUNDLE_DEST
mv $BUNDLE_DEST/bundle "$COMPILE_DIR/app"
rmdir $BUNDLE_DEST

# Run npm install on the built slug; only for `--production` dependencies.
if [ -e "$COMPILE_DIR"/app/programs/server/package.json ]; then
  cd "$COMPILE_DIR"/app/programs/server
  HOME=$METEOR_DIR $METEOR_NPM install --production
  cd "$APP_SOURCE_DIR"
fi

# Move meteor installation to where we can use it in bin/release
mv "$METEOR_DIR" "$APP_CHECKOUT_DIR/meteor-dist"

# Make relative symlink to METEOR_NODE
METEOR_NODE_RELATIVE=python2.7 -c "import os.path; print os.path.relpath('$METEOR_DIR', '$METEOR_NODE')"
cd "$APP_CHECKOUT_DIR"/meteor-dist
ln -s "$METEOR_NODE_RELATIVE" meteor-node
cd "$APP_SOURCE_DIR"

#
# Environment
#
# Add an export of PATH which includes our compile dir, etc.
echo "-----> Adding PATH environment"
mkdir -p "$APP_CHECKOUT_DIR"/.profile.d
cat > "$APP_CHECKOUT_DIR"/.profile.d/path.sh <<EOF
  #!/bin/sh
  export PATH=\$HOME/$COMPILE_DIR_SUFFIX/bin:\$PATH
  export LD_LIBRARY_PATH=\$LD_LIBRARY_PATH:\$HOME/$COMPILE_DIR_SUFFIX/lib
EOF

#
# Extras
#

# source scripts in 'extra' dir, if any.  Create them for custom stuff like
# binary dependencies, additional environment settings, etc.
echo "-----> Running extras"
for file in `ls "$BUILDPACK_DIR"/extra | sort`; do
  . "$BUILDPACK_DIR"/extra/$file
done
